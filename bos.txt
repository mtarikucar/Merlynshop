import { useState } from 'react';
import { useQuery } from 'react-query';
import axios from 'axios';

function getCategories() {
  return axios.get('/api/categories')
    .then((response) => response.data);
}

function getPrices() {
  return axios.get('/api/prices')
    .then((response) => response.data);
}

function getProductsByCategoryAndPrice(categoryId, price) {
  return axios.get(`/api/products?categoryId=${categoryId}&price=${price}`)
    .then((response) => response.data);
}

function ProductList() {
  const [categoryId, setCategoryId] = useState('');
  const [price, setPrice] = useState('');
  const { data: categories, isLoading: categoriesLoading, isError: categoriesError, error: categoriesErrorData } = useQuery(
    'categories',
    getCategories
  );
  const { data: prices, isLoading: pricesLoading, isError: pricesError, error: pricesErrorData } = useQuery(
    'prices',
    getPrices
  );
  const { data: products, isLoading: productsLoading, isError: productsError, error: productsErrorData } = useQuery(
    ['products', categoryId, price],
    () => getProductsByCategoryAndPrice(categoryId, price),
    { enabled: !!categoryId && !!price }
  );

  function handleCategoryChange(event) {
    setCategoryId(event.target.value);
  }

  function handlePriceChange(event) {
    setPrice(event.target.value);
  }

  if (categoriesLoading || pricesLoading || productsLoading) {
    return <div>Loading...</div>;
  }

  if (categoriesError || pricesError || productsError) {
    return (
      <div>
        Error:
        {categoriesErrorData && categoriesErrorData.message}
        {pricesErrorData && pricesErrorData.message}
        {productsErrorData && productsErrorData.message}
      </div>
    );
  }

  return (
    <div>
      <label htmlFor="category">Category:</label>
      <select id="category" name="category" value={categoryId} onChange={handleCategoryChange}>
        <option value="">--Select Category--</option>
        {categories.map((category) => (
          <option key={category.id} value={category.id}>
            {category.name}
          </option>
        ))}
      </select>
      <br />
      <label htmlFor="price">Price:</label>
      <select id="price" name="price" value={price} onChange={handlePriceChange}>
        <option value="">--Select Price--</option>
        {prices.map((price) => (
          <option key={price.id} value={price.value}>
            {price.label}
          </option>
        ))}
      </select>
      <br />
      <ul>
        {products.map((product) => (
          <li key={product.id}>
            {product.name} - {product.price}
          </li>
        ))}
      </ul>
    </div>
  );
}
----------------------------------------------------------
import { useState } from 'react';
import { useQuery } from 'react-query';
import axios from 'axios';

function getProductsByCategoryAndPrice(categoryId, price) {
  return axios.get(`/api/products?categoryId=${categoryId}&price=${price}`)
    .then((response) => response.data);
}

function ProductList() {
  const [categoryId, setCategoryId] = useState('');
  const [price, setPrice] = useState('');
  const { data: products, isLoading, isError, error } = useQuery(
    ['products', categoryId, price],
    () => getProductsByCategoryAndPrice(categoryId, price),
    { enabled: !!categoryId && !!price }
  );

  function handleCategoryChange(event) {
    setCategoryId(event.target.value);
  }

  function handlePriceChange(event) {
    setPrice(event.target.value);
  }

  const categories = [
    { id: 'f6531a89-cb03-4ec4-a837-95cf7cd50ce1', name: 'Category 1' },
    { id: 'some-other-category-id', name: 'Category 2' },
    { id: 'yet-another-category-id', name: 'Category 3' },
  ];

  const prices = [
    { id: 'less-than-100', name: 'Less than $100', value: '100' },
    { id: '100-to-200', name: '$100 to $200', value: '200' },
    { id: '200-to-300', name: '$200 to $300', value: '300' },
  ];

  if (isLoading) {
    return <div>Loading...</div>;
  }

  if (isError) {
    return <div>Error: {error.message}</div>;
  }

  return (
    <div>
      <label htmlFor="category">Category:</label>
      <select id="category" name="category" value={categoryId} onChange={handleCategoryChange}>
        <option value="">--Select Category--</option>
        {categories.map((category) => (
          <option key={category.id} value={category.id}>{category.name}</option>
        ))}
      </select>
      <br />
      <label htmlFor="price">Price:</label>
      <select id="price" name="price" value={price} onChange={handlePriceChange}>
        <option value="">--Select Price--</option>
        {prices.map((priceOption) => (
          <option key={priceOption.id} value={priceOption.value}>{priceOption.name}</option>
        ))}
      </select>
      <br />
      <ul>
        {products.map((product) => (
          <li key={product.id}>
            {product.name} - {product.price}
          </li>
        ))}
      </ul>
    </div>
  );
}
